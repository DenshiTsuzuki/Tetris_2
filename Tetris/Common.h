#pragma once
#include<Siv3D.hpp>
using namespace std;

enum class State {
	Title,
	Game,
	End
};



using Task_Scene = SceneManager < State>;

enum class Mino_Type :int{
	I = 1,
	O ,
	T ,
	J ,
	L ,
	S ,
	Z 
};

//ブロック情報
struct BlockData {
	int _arr[4][4];
};

//ブロック基本情報
static BlockData bdp[8][4] = {
	{//使わない　enumと合わせる用
		{{
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0}
		}},
		{{
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0}
		}},
		{{
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0}
		}},
		{{
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0}
		}},

		},
	//縦棒
	{
		{{
			{0,1,0,0},
			{0,1,0,0},
			{0,1,0,0},
			{0,1,0,0}
		}},
		{{
			{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1},
			{0,0,0,0}
		}},
		{{
			{0,1,0,0},
			{0,1,0,0},
			{0,1,0,0},
			{0,1,0,0}
		}},
		{{
			{0,0,0,0},
			{0,0,0,0},
			{1,1,1,1},
			{0,0,0,0}
		}}
	},

	//矩形
	{
		{{
			{0,0,0,0},
			{0,2,2,0},
			{0,2,2,0},
			{0,0,0,0}
		}},
		{{
			{0,0,0,0},
			{0,2,2,0},
			{0,2,2,0},
			{0,0,0,0}
		}},
		{{
			{0,0,0,0},
			{0,2,2,0},
			{0,2,2,0},
			{0,0,0,0}
		}},
		{{
			{0,0,0,0},
			{0,2,2,0},
			{0,2,2,0},
			{0,0,0,0}
		}}
	},

	//T
	{
		{{
			{0,0,0,0},
			{0,3,0,0},
			{3,3,3,0},
			{0,0,0,0}
		}},
		{{
			{0,0,0,0},
			{0,3,0,0},
			{0,3,3,0},
			{0,3,0,0}
		}},
		{{
			{0,0,0,0},
			{0,0,0,0},
			{3,3,3,0},
			{0,3,0,0}
		}},
		{{
			{0,0,0,0},
			{0,3,0,0},
			{3,3,0,0},
			{0,3,0,0}
		}}
	},

	//J
	{
		{{
			{0,0,0,0},
			{0,0,0,0},
			{4,4,4,0},
			{0,0,4,0}
		}},
		{{
			{0,0,0,0},
			{0,4,0,0},
			{0,4,0,0},
			{4,4,0,0}
		}},
		{ {
			{0,0,0,0},
			{4,0,0,0},
			{4,4,4,0},
			{0,0,0,0}
		} },
		{ {
			{0,0,0,0},
			{0,4,4,0},
			{0,4,0,0},
			{0,4,0,0}
		} },

	},

	//L
	{
		{{
			{0,0,0,0},
			{0,0,5,0},
			{5,5,5,0},
			{0,0,0,0}
		}},
		{{
			{0,0,0,0},
			{0,5,0,0},
			{0,5,0,0},
			{0,5,5,0}
		}},
		{{
			{0,0,0,0},
			{0,0,0,0},
			{5,5,5,0},
			{5,0,0,0}
		}},
		{{
			{0,0,0,0},
			{5,5,0,0},
			{0,5,0,0},
			{0,5,0,0}
		}}
	},

	//S
{
	{{
		{0,0,0,0},
		{0,6,6,0},
		{6,6,0,0},
		{0,0,0,0}
	}},
	{{
		{0,0,0,0},
		{0,6,0,0},
		{0,6,6,0},
		{0,0,6,0}
	}},
	{{
		{ 0,0,0,0 },
		{ 0,6,6,0 },
		{ 6,6,0,0 },
		{ 0,0,0,0 }
	}},
	{{
		{0,0,0,0},
		{0,6,0,0},
		{0,6,6,0},
		{0,0,6,0}
	}},
},

//Z
{
	{{
		{0,0,0,0},
		{0,0,0,0},
		{7,7,0,0},
		{0,7,7,0}
	}},
	{{
		{0,0,0,0},
		{0,0,7,0},
		{0,7,7,0},
		{0,7,0,0}
	}},
	{{
		{0,0,0,0},
		{0,0,0,0},
		{7,7,0,0},
		{0,7,7,0}
	}},
	{{
		{0,0,0,0},
		{0,0,7,0},
		{0,7,7,0},
		{0,7,0,0}
	}}

}
};

//スコア加算
static int scoredef[5] = { 0,100,300,600,1000 };

//フィールド配列
#define field_size_x 12
#define field_size_y 25
#define field_begin 4

//矩形サイズ
#define mino_s 40

//フィールド表示初期位置
#define field_x 40
#define field_y -120

//ネクストブロック表示位置
#define next_x 450
#define next_y 80

//4*4
#define mino_wh 4

//落下時間初期値
#define def_interval 30

//スコア表示用
#define score_x 800
#define score_y 60